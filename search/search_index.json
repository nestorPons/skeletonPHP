{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SkeletonPHP Framework de trabajo con carga rapida y modular con tecnolog\u00edas asentadas como son PHP, JS y CSS. Carga modular de cualquier contenido sin tener que repetir la total carga de todo el contenido de la aplicaci\u00f3n. Modulos personalizados eliminando la rebundancia de c\u00f3digo facilitando el trabajo y la legibilidad del codigo. Licencia Este proyecto est\u00e1 bajo la Licencia MIT - mira el archivo LICENSE.md para m\u00e1s detalles. \u2328 Con \u2764\ufe0f por N\u00e9stor Pons \ud83d\ude0a Icons made by Freepik from www.flaticon.com","title":"Inicio"},{"location":"#skeletonphp","text":"Framework de trabajo con carga rapida y modular con tecnolog\u00edas asentadas como son PHP, JS y CSS. Carga modular de cualquier contenido sin tener que repetir la total carga de todo el contenido de la aplicaci\u00f3n. Modulos personalizados eliminando la rebundancia de c\u00f3digo facilitando el trabajo y la legibilidad del codigo.","title":"SkeletonPHP"},{"location":"#licencia","text":"Este proyecto est\u00e1 bajo la Licencia MIT - mira el archivo LICENSE.md para m\u00e1s detalles. \u2328 Con \u2764\ufe0f por N\u00e9stor Pons \ud83d\ude0a Icons made by Freepik from www.flaticon.com","title":"Licencia"},{"location":"components/","text":"Componentes Skeleton Descripci\u00f3n Los componentes son trozos de codigo independientes que generan un objeto html con caracter\u00edsticas singulares. Son objetos encapsulados con una estructura HTML , un dise\u00f1o CSS, y un comportamiento con JS. Ayudan a crear aplicaciones m\u00e1s f\u00e1ciles de dise\u00f1ar y mantener. Son f\u00e1cilmente reutilizables, minimizan y homogenizan todo muestro c\u00f3digo. Para un mayor dinamismo cuenta con distintas tecnolog\u00edas para darle mayor funcionalidad: Component La forma de crearlo es en un archivo con el nombre del componente que se desea. Se debe iniciar y acabar con el pseudo-tag component <code>&lt;component id=\"\"&gt;Codigo...&lt;/component&gt;</code>. Dentro de el incluiremos la estructura html, js y css si se desea, y ser\u00e1 precompilada con las directivas Bone. Podemos encapsularle unos estilos propios mediante el tag <code>&lt;style lang=\"\" scoped&gt;&lt;style&gt;</code> con el atributo lang se declarar\u00e1 el sublenguaje que se est\u00e9 empleando: Lesscss, Sass etc.. Para a\u00f1adir la funcionalidad al componente se declara la etiqueta &lt;script scope&gt;&lt;script&gt; Los atributos que se le pasan al componente a su llamada se declaran como variables Bone. Ejemplo bot\u00f3n Ejemplo de un componente bot\u00f3n: <m-btn onclick=\"alert(`Hay que poner estas comillas para que lo reconozca`)\"></m-btn> src/mycomponents/m-btn.phtml <component id=\"--id\"> <button type = \"submit\" id=\"--id_el\" class=\"$$class collapse tertiary\" placeholder=\" \" name = \"$$name\" tile = \"$$tile\" value = \"$$value\" tabindex = \"$$tabindex\" onfocus = \"$$onfocus\" onblur = \"$$onblur\" onclick = \"$$onclick\" onkeypress = \"$$onkeypress\" onkeydown = \"$$onkeydown\" onkeyup = \"$$onkeyup\" onchange = \"$$onchange\" $$require $$disabled $$readonly $$checked > @if ($$spinner) <i class=\"spinner hidden\"></i> @endif @if ($$icon) <i class=\"lnr lnr-$$icon\"></i> @endif @if ($$caption) <span class=\"caption\">$$caption</span> @else <span class=\"caption\">Aceptar</span> @endif </button> </component> Procesado de la salida al archivo .php: <?php $c = new \\core\\Component('m-btn-success', '[]', ''); $c->print();?> Resultado html: <button type=\"submit\" id=\"tag619cca9846628_el\" class=\" collapse tertiary\" placeholder=\" \"> <span class=\"caption\">Aceptar</span> </button> La forma de crearlo es en un archivo con el nombre del componente que se desea. <br> Se debe iniciar y acabar con el pseudo-tag component <code>&lt;component id=\"\"&gt;Codigo...&lt;/component&gt;</code>. <br> Dentro de el incluiremos la estructura html, js y css si se desea, y ser\u00e1 precompilada con las directivas Bone. <br> Podemos encapsularle unos estilos propios mediante el tag <code>&lt;style lang=\"\" scoped&gt;&lt;style&gt;</code> con el atributo lang se declarar\u00e1 el sublenguaje que se est\u00e9 empleando: Lesscss, Sass etc.. <br> Para a\u00f1adir la funcionalidad al componente se declara la etiqueta &lt;script scope&gt;&lt;script&gt; <br> Los atributos que se le pasan al componente a su llamada se declaran como variables Bone.","title":"Componentes"},{"location":"components/#componentes-skeleton","text":"","title":"Componentes Skeleton"},{"location":"components/#descripcion","text":"Los componentes son trozos de codigo independientes que generan un objeto html con caracter\u00edsticas singulares. Son objetos encapsulados con una estructura HTML , un dise\u00f1o CSS, y un comportamiento con JS. Ayudan a crear aplicaciones m\u00e1s f\u00e1ciles de dise\u00f1ar y mantener. Son f\u00e1cilmente reutilizables, minimizan y homogenizan todo muestro c\u00f3digo. Para un mayor dinamismo cuenta con distintas tecnolog\u00edas para darle mayor funcionalidad:","title":"Descripci\u00f3n"},{"location":"components/#component","text":"La forma de crearlo es en un archivo con el nombre del componente que se desea. Se debe iniciar y acabar con el pseudo-tag component <code>&lt;component id=\"\"&gt;Codigo...&lt;/component&gt;</code>. Dentro de el incluiremos la estructura html, js y css si se desea, y ser\u00e1 precompilada con las directivas Bone. Podemos encapsularle unos estilos propios mediante el tag <code>&lt;style lang=\"\" scoped&gt;&lt;style&gt;</code> con el atributo lang se declarar\u00e1 el sublenguaje que se est\u00e9 empleando: Lesscss, Sass etc.. Para a\u00f1adir la funcionalidad al componente se declara la etiqueta &lt;script scope&gt;&lt;script&gt; Los atributos que se le pasan al componente a su llamada se declaran como variables Bone.","title":"Component"},{"location":"components/#ejemplo-boton","text":"Ejemplo de un componente bot\u00f3n: <m-btn onclick=\"alert(`Hay que poner estas comillas para que lo reconozca`)\"></m-btn> src/mycomponents/m-btn.phtml <component id=\"--id\"> <button type = \"submit\" id=\"--id_el\" class=\"$$class collapse tertiary\" placeholder=\" \" name = \"$$name\" tile = \"$$tile\" value = \"$$value\" tabindex = \"$$tabindex\" onfocus = \"$$onfocus\" onblur = \"$$onblur\" onclick = \"$$onclick\" onkeypress = \"$$onkeypress\" onkeydown = \"$$onkeydown\" onkeyup = \"$$onkeyup\" onchange = \"$$onchange\" $$require $$disabled $$readonly $$checked > @if ($$spinner) <i class=\"spinner hidden\"></i> @endif @if ($$icon) <i class=\"lnr lnr-$$icon\"></i> @endif @if ($$caption) <span class=\"caption\">$$caption</span> @else <span class=\"caption\">Aceptar</span> @endif </button> </component> Procesado de la salida al archivo .php: <?php $c = new \\core\\Component('m-btn-success', '[]', ''); $c->print();?> Resultado html: <button type=\"submit\" id=\"tag619cca9846628_el\" class=\" collapse tertiary\" placeholder=\" \"> <span class=\"caption\">Aceptar</span> </button> La forma de crearlo es en un archivo con el nombre del componente que se desea. <br> Se debe iniciar y acabar con el pseudo-tag component <code>&lt;component id=\"\"&gt;Codigo...&lt;/component&gt;</code>. <br> Dentro de el incluiremos la estructura html, js y css si se desea, y ser\u00e1 precompilada con las directivas Bone. <br> Podemos encapsularle unos estilos propios mediante el tag <code>&lt;style lang=\"\" scoped&gt;&lt;style&gt;</code> con el atributo lang se declarar\u00e1 el sublenguaje que se est\u00e9 empleando: Lesscss, Sass etc.. <br> Para a\u00f1adir la funcionalidad al componente se declara la etiqueta &lt;script scope&gt;&lt;script&gt; <br> Los atributos que se le pasan al componente a su llamada se declaran como variables Bone.","title":"Ejemplo bot\u00f3n"},{"location":"folders/","text":"Estructura Carpetas y archivos Descripci\u00f3n .server/ Servidor LAMP Docker para desarroyo .server/conf/ Directorio de configuraci\u00f3n del servidor docker .server/conf/000-default.conf Archivo de configuraci\u00f3n por defecto .server/conf/apache2.conf Archivo de configuraci\u00f3n servidor Apache .server/conf/php.ini Archivo de configuraci\u00f3n PHP .server/docker-compose.yml Archivo de configuraci\u00f3n docker-composer .server/Dockerfile Archivo de configuraci\u00f3n Docker .server/logs Carpeta donde se almacenan los hist\u00f3ricos del servidor .server/README.md Instrucciones para instalarr y lanzar el servidor app/ Cuerpo de la aplicaci\u00f3n app/config/ Archivos de configuraci\u00f3n editables app/config/config.ini Archivo de configuraci\u00f3n de la aplicaci\u00f3n (EDITABLE) app/core/ Carpeta de las clases principales del proyecto app/core/Component.php Clase creadora de los componentes Skeleton app/core/Controller.php Clase padre de los controladore app/core/Data.php Clase de tratamiento de datos app/core/Error.php Clase de errores app/core/Prepocessor.php Clase que preprocesa las plantillas y los componentes app/core/Query.php Clase para la conexi\u00f3n a base de datos MYSQL app/core/Router.php Clase enrutadora de las peticiones que se formulan al servidor app/core/Security.php Clase que proporciona la seguridad a la aplicaci\u00f3n app/core/Tag.php Clase para trabajar con los objetos html app/core/ToolsComponents.php Clase de para el trabajo con patrones de sintaxis app/db/ Carpeta contenedora de archivos sql app/helpers Carpeta contenedora de funciones auxiliares app/libs Librerias externas docs/ Documentaci\u00f3n del proyecto en Marckdown site/ Sitio web autogenerado con la documentaci\u00f3n htdocs/ Raiz de los archivos p\u00fablicos htdocs/index.php Entrada principal de la aplicaci\u00f3n htdocs/package.json Archivo de configuraci\u00f3n npm htdocs/www/ Contenedor de los archivos p\u00fablicos autogenerados src/ Nuestro c\u00f3digo modelo MVC src/controllers/ Contendr\u00e1 los controladores necesarios src/js/ Contendr\u00e1 los archivos js requeridos src/models/ Contendr\u00e1 los modelos src/mycomponents/ Carpeta contenedora de los componentes personalizados/ src/styles/ Carpeta con los estilos de la aplicaci\u00f3n src/views/ Carpeta de las vistas vendor/ Carpeta de composer .gitignore Archivo de configuraci\u00f3n git composer.json Archivo configuraci\u00f3n composer LICENSE.md Archivo de la licencia mkdocks.yml Archivo de configuraci\u00f3n de mkdocs para la documentaci\u00f3n README.md Archivo de instrucciones","title":"Carpetas"},{"location":"folders/#estructura","text":"Carpetas y archivos Descripci\u00f3n .server/ Servidor LAMP Docker para desarroyo .server/conf/ Directorio de configuraci\u00f3n del servidor docker .server/conf/000-default.conf Archivo de configuraci\u00f3n por defecto .server/conf/apache2.conf Archivo de configuraci\u00f3n servidor Apache .server/conf/php.ini Archivo de configuraci\u00f3n PHP .server/docker-compose.yml Archivo de configuraci\u00f3n docker-composer .server/Dockerfile Archivo de configuraci\u00f3n Docker .server/logs Carpeta donde se almacenan los hist\u00f3ricos del servidor .server/README.md Instrucciones para instalarr y lanzar el servidor app/ Cuerpo de la aplicaci\u00f3n app/config/ Archivos de configuraci\u00f3n editables app/config/config.ini Archivo de configuraci\u00f3n de la aplicaci\u00f3n (EDITABLE) app/core/ Carpeta de las clases principales del proyecto app/core/Component.php Clase creadora de los componentes Skeleton app/core/Controller.php Clase padre de los controladore app/core/Data.php Clase de tratamiento de datos app/core/Error.php Clase de errores app/core/Prepocessor.php Clase que preprocesa las plantillas y los componentes app/core/Query.php Clase para la conexi\u00f3n a base de datos MYSQL app/core/Router.php Clase enrutadora de las peticiones que se formulan al servidor app/core/Security.php Clase que proporciona la seguridad a la aplicaci\u00f3n app/core/Tag.php Clase para trabajar con los objetos html app/core/ToolsComponents.php Clase de para el trabajo con patrones de sintaxis app/db/ Carpeta contenedora de archivos sql app/helpers Carpeta contenedora de funciones auxiliares app/libs Librerias externas docs/ Documentaci\u00f3n del proyecto en Marckdown site/ Sitio web autogenerado con la documentaci\u00f3n htdocs/ Raiz de los archivos p\u00fablicos htdocs/index.php Entrada principal de la aplicaci\u00f3n htdocs/package.json Archivo de configuraci\u00f3n npm htdocs/www/ Contenedor de los archivos p\u00fablicos autogenerados src/ Nuestro c\u00f3digo modelo MVC src/controllers/ Contendr\u00e1 los controladores necesarios src/js/ Contendr\u00e1 los archivos js requeridos src/models/ Contendr\u00e1 los modelos src/mycomponents/ Carpeta contenedora de los componentes personalizados/ src/styles/ Carpeta con los estilos de la aplicaci\u00f3n src/views/ Carpeta de las vistas vendor/ Carpeta de composer .gitignore Archivo de configuraci\u00f3n git composer.json Archivo configuraci\u00f3n composer LICENSE.md Archivo de la licencia mkdocks.yml Archivo de configuraci\u00f3n de mkdocs para la documentaci\u00f3n README.md Archivo de instrucciones","title":"Estructura"}]}